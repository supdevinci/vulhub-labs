#!/bin/bash
>docker_error.log
check_dependency() {
    if ! command -v $1 &>/dev/null; then
        echo "Erreur : $1 n'est pas installé. Veuillez l'installer avant de continuer."
        exit 1
    fi
}

# Function to extract ports from docker-compose.yml
extract_ports() {
    local compose_file=$1
    #grep -E "ports:" -A 1 "$compose_file" | grep -o "[0-9]*:[0-9]*"
    grep -E "^\s*- \".*:[0-9]+\"" "$compose_file" | awk -F '"' '{print $2}' | awk -F ':' '{print $1}'
}

# Function to check if there are Docker containers matching the pattern "cve-date-id-software"
has_matching_containers() {
    local pattern="cve-[0-9]{4}-[0-9]+-.+"
    docker ps --format "{{.Names}}" | grep -qE "$pattern"
}

# Function to stop all Docker containers matching the pattern "cve-date-id-software"
stop_matching_containers() {
    local pattern="cve-[0-9]{4}-[0-9]+-.+"
    docker ps --format "{{.ID}} {{.Names}}" | grep -E "$pattern" | awk '{print $1}' | xargs -r docker stop
}

# Function to display a loading bar for container deletion
show_deletion_progress() {
    (
        for i in {1..100}; do
            echo $i
            sleep 0.05
        done
    ) | dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --gauge "Deleting Vulnhub containers..." 10 70 0
}

# Function to ask the user if they want to delete matching containers
ask_to_delete_containers() {
    dialog --clear --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Warning" --yesno \
"Do you want to stop and delete all Vulnhub-related containers?
These are containers with names matching the pattern: cve-[year]-[id]-[software].

This action is irreversible." 15 60

    return $?
}

# Function to display a progress bar
show_progress_bar() {
    (
        for i in {1..100}; do
            echo $i
            sleep 0.1
        done
    ) | dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --gauge "Launching Docker for $SOFT / $CVE..." 10 70 0
}

# Function to handle cancel action
handle_cancel() {
    dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Goodbye" --msgbox \
"You chose to cancel. Exiting the script." 10 50
    clear
    exit 0
}

# Check for dialog installation
if ! command -v dialog &>/dev/null; then
    echo "Error: dialog is not installed. Install it with:"
    echo "sudo apt install dialog"
    exit 1
fi

# Check if there are matching containers
if has_matching_containers; then
    # Ask the user if they want to delete the containers
    ask_to_delete_containers
    if [ $? -eq 0 ]; then
        # Show loading bar and delete containers
        show_deletion_progress &
        PROGRESS_PID=$!
        stop_matching_containers
        wait $PROGRESS_PID
    fi
fi

# Display project explanation
dialog --clear --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Welcome" --msgbox \
"Welcome to the Vulnerability Testing Project.

This script allows you to select a vulnerable software, 
choose a specific vulnerability (CVE), and launch the 
corresponding Docker environment to explore this vulnerability.

Follow the steps to select and test vulnerabilities." 15 60 || handle_cancel

# Main menu and functionality continue below...
check_dependency() {
    if ! command -v $1 &>/dev/null; then
        echo "Erreur : $1 n'est pas installé. Veuillez l'installer avant de continuer."
        exit 1
    fi
}
check_dependency docker
check_dependency docker-compose

while true; do
    # Get the list of available software
    SOFT_LIST=$(ls -d */ | sed 's/\/$//')
    if [ -z "$SOFT_LIST" ]; then
        dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Error" --msgbox \
"No software available in the current directory." 10 50
        clear
        exit 1
    fi

    # Prepare the software menu with a Quit option
    SOFT_MENU=()
    for SOFT in $SOFT_LIST; do
        SOFT_MENU+=("$SOFT" "")
    done
    SOFT_MENU+=("Quit" "Exit the script")

    # Show the main menu
    SOFT=$(dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --stdout --title "Select Software" --menu \
"Choose a software to test or quit:" 20 60 10 "${SOFT_MENU[@]}") || handle_cancel
    if [ -z "$SOFT" ]; then
        handle_cancel
    fi

    # Handle Quit option
    if [ "$SOFT" == "Quit" ]; then
        handle_cancel
    fi

    # Check for docker-compose.yml in the selected software directory
    if [ ! -f "$SOFT/docker-compose.yml" ]; then
        # If no docker-compose.yml, list subdirectories
        SUBDIR_LIST=$(ls -d "$SOFT"/*/ 2>/dev/null | sed 's/\/$//' | xargs -n 1 basename)
        if [ -z "$SUBDIR_LIST" ]; then
            dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Error" --msgbox \
"No docker-compose.yml or subdirectories found in $SOFT." 10 50
            continue
        fi

        # Prepare the subdirectory menu
        SUBDIR_MENU=()
        for SUBDIR in $SUBDIR_LIST; do
            SUBDIR_MENU+=("$SUBDIR" "")
        done

        # Let the user select a subdirectory
        SUBDIR=$(dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --stdout --title "Select Subdirectory" --menu \
"Choose a subdirectory in $SOFT:" 20 60 10 "${SUBDIR_MENU[@]}") || handle_cancel
        if [ -z "$SUBDIR" ]; then
            handle_cancel
        fi

        # Update the compose file path to the subdirectory
        COMPOSE_FILE="$SOFT/$SUBDIR/docker-compose.yml"
        CVE=$SUBDIR
    else
        COMPOSE_FILE="$SOFT/docker-compose.yml"
        CVE="N/A"
    fi

    # Check if the docker-compose.yml exists in the final path
    if [ ! -f "$COMPOSE_FILE" ]; then
        dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Error" --msgbox \
"docker-compose.yml file not found in $SOFT/$SUBDIR." 10 50
        continue
    fi

    # Launch docker-compose and show a progress bar
    show_progress_bar &
    PROGRESS_PID=$!
    docker-compose -f "$COMPOSE_FILE" up &>docker_error.log &
    wait $PROGRESS_PID
    sleep 3  # Give some time for Docker to start or fail
    if ! grep -q "Error response from daemon:" docker_error.log; then
   	# Extract and display the ports used
	PORTS=$(extract_ports "$COMPOSE_FILE")
	if [ -n "$PORTS" ]; then
    	  # Construct the output with 127.0.0.1 for each port
    	  URLS=$(echo "$PORTS" | sed "s/^/127.0.0.1:/")

    	  # Create the stylish box for dialog
    	  MESSAGE="The following ports are mapped for the $SOFT $SUBDIR container:"
	  MESSAGE+="\n\n"
    	  MESSAGE+="$URLS"
	  MESSAGE+="\n\n"
    	  MESSAGE+="Write-ups are available at this URL" 
	  MESSAGE+="\n\n"
    	  MESSAGE+="https://github.com/supdevinci/vulhub-labs/tree/master/$SOFT/$SUBDIR/"
	  MESSAGE+="\n\n"
    	  # Display in a dialog box
	  clear
          echo -e  "$MESSAGE"
       fi
    else
    # Extract the port being used
PORT=$(grep "Bind for" docker_error.log | sed -n 's/.*Bind for .*:\([0-9]*\) failed:.*/\1/p')

# Get the name of the Docker container using this port
DOCKERNAME=$(docker ps --format "{{.Names}} ({{.Ports}})" | grep ":$PORT" | awk '{print $1}')

# Build the message
MESSAGE=""
MESSAGE+="\n\n"
MESSAGE+="$(docker ps --format "{{.ID}}: {{.Names}} ({{.Ports}})" | grep :$PORT)"
MESSAGE+="\n\n"
MESSAGE+="If you want to stop the Docker container causing the port conflict, run this command:\n"
MESSAGE+=""
MESSAGE+="\n\n"
MESSAGE+="docker stop $DOCKERNAME"
MESSAGE+="\n\n"

# Display the message using dialog
dialog --backtitle "Vulhub Playground - By School Sup de Vinci" --title "Port Conflict Detected" --msgbox "$MESSAGE" 20 70
	clear
    echo -e "Port Conflict Detected"
    echo -e "$MESSAGE"
    fi

    break
done
